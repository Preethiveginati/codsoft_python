import tkinter as tk
from tkinter import messagebox, simpledialog

class ContactManager:
    def __init__(self, root):
        self.contacts = []
        self.root = root
        self.root.title("Contact Manager")
        self.root.configure(bg="#000000")  # Set the background color of the main window

        # Labels with text color and background color
        tk.Label(root, text="Name:", fg="maroon", bg="#e6e6e6").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        tk.Label(root, text="Phone:", fg="maroon", bg="#e6e6e6").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        tk.Label(root, text="Email:", fg="maroon", bg="#e6e6e6").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        tk.Label(root, text="Address:", fg="maroon", bg="#e6e6e6").grid(row=3, column=0, padx=10, pady=5, sticky="w")

        # Entry widgets with text color and background color
        self.name_entry = tk.Entry(root, fg="black", bg="white")  # Text color and background color for the entry
        self.phone_entry = tk.Entry(root, fg="black", bg="white")
        self.email_entry = tk.Entry(root, fg="black", bg="white")
        self.address_entry = tk.Entry(root, fg="black", bg="white")

        self.name_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")
        self.phone_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")
        self.email_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")
        self.address_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        # Buttons with text color and background color
        tk.Button(root, text="Add Contact", command=self.add_contact, fg="white", bg="green").grid(row=4, column=0, columnspan=2, pady=10)
        tk.Button(root, text="View Contacts", command=self.view_contacts, fg="white", bg="blue").grid(row=5, column=0, columnspan=2, pady=10)
        tk.Button(root, text="Search Contact", command=self.search_contact, fg="white", bg="orange").grid(row=6, column=0, columnspan=2, pady=10)
        tk.Button(root, text="Update Contact", command=self.update_contact, fg="white", bg="purple").grid(row=7, column=0, columnspan=2, pady=10)
        tk.Button(root, text="Delete Contact", command=self.delete_contact, fg="white", bg="red").grid(row=8, column=0, columnspan=2, pady=10)

    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()

        if name and phone:
            contact = {"Name": name, "Phone": phone, "Email": email, "Address": address}
            self.contacts.append(contact)
            messagebox.showinfo("Success", "Contact added successfully!")
            self.clear_entries()
        else:
            messagebox.showerror("Error", "Name and Phone are required fields.")

    def view_contacts(self):
        if self.contacts:
            result = "\n".join([f"{contact['Name']}: {contact['Phone']}" for contact in self.contacts])
            messagebox.showinfo("Contacts", result)
        else:
            messagebox.showinfo("Contacts", "No contacts available.")

    def search_contact(self):
        search_query = simpledialog.askstring("Search", "Enter name or phone number:")
        if search_query:
            found_contacts = [contact for contact in self.contacts if search_query.lower() in contact['Name'].lower() or search_query in contact['Phone']]
            if found_contacts:
                result = "\n".join([f"{contact['Name']}: {contact['Phone']}" for contact in found_contacts])
                messagebox.showinfo("Search Results", result)
            else:
                messagebox.showinfo("Search Results", "No matching contacts found.")
        else:
            messagebox.showerror("Error", "Please enter a search query.")

    def update_contact(self):
        # Implement updating contact details here
        pass

    def delete_contact(self):
        # Implement deleting a contact here
        pass

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactManager(root)
    root.mainloop()
